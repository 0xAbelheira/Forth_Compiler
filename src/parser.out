Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    I
    NUMBERF
    STRING

Grammar

Rule 0     S' -> Comandos
Rule 1     Comandos -> Comandos Comando
Rule 2     Comandos -> <empty>
Rule 3     Comando -> Expressao
Rule 4     Comando -> Imprime
Rule 5     Comando -> Comment
Rule 6     Comando -> Store
Rule 7     Comando -> Variavel
Rule 8     Comando -> Conditional
Rule 9     Comando -> Loop
Rule 10    Comando -> Func
Rule 11    Expressao -> Expressao +
Rule 12    Expressao -> Expressao -
Rule 13    Expressao -> Expressao *
Rule 14    Expressao -> Expressao /
Rule 15    Expressao -> Expressao %
Rule 16    Expressao -> Expressao >
Rule 17    Expressao -> Expressao SUPEQ
Rule 18    Expressao -> Expressao <
Rule 19    Expressao -> Expressao INFEQ
Rule 20    Expressao -> Expressao =
Rule 21    Expressao -> Termo
Rule 22    Termo -> NUMBER
Rule 23    Termo -> Unstore
Rule 24    Imprime -> DOT
Rule 25    Imprime -> DOTSTRING
Rule 26    Imprime -> EMIT
Rule 27    Comment -> COMMENT_START COMMENT_END
Rule 28    Comment -> ONELINE
Rule 29    Store -> ID !
Rule 30    Unstore -> ID @
Rule 31    Variavel -> VARIABLE ID
Rule 32    Conditional -> Expressao IF Comandos THEN
Rule 33    Conditional -> Expressao IF Comandos ELSE Comandos THEN
Rule 34    Loop -> Expressao DO Comandos LOOP
Rule 35    Loop -> Expressao DO Comandos Expressao MLOOP
Rule 36    Func -> FUNC_START ID Comandos FUNC_END

Terminals, with rules where they appear

!                    : 29
%                    : 15
*                    : 13
+                    : 11
-                    : 12
/                    : 14
<                    : 18
=                    : 20
>                    : 16
@                    : 30
COMMENT_END          : 27
COMMENT_START        : 27
DO                   : 34 35
DOT                  : 24
DOTSTRING            : 25
ELSE                 : 33
EMIT                 : 26
FUNC_END             : 36
FUNC_START           : 36
I                    : 
ID                   : 29 30 31 36
IF                   : 32 33
INFEQ                : 19
LOOP                 : 34
MLOOP                : 35
NUMBER               : 22
NUMBERF              : 
ONELINE              : 28
STRING               : 
SUPEQ                : 17
THEN                 : 32 33
VARIABLE             : 31
error                : 

Nonterminals, with rules where they appear

Comando              : 1
Comandos             : 1 32 33 33 34 35 36 0
Comment              : 5
Conditional          : 8
Expressao            : 3 11 12 13 14 15 16 17 18 19 20 32 33 34 35 35
Func                 : 10
Imprime              : 4
Loop                 : 9
Store                : 6
Termo                : 21
Unstore              : 23
Variavel             : 7

Parsing method: LALR

state 0

    (0) S' -> . Comandos
    (1) Comandos -> . Comandos Comando
    (2) Comandos -> .

    DOT             reduce using rule 2 (Comandos -> .)
    DOTSTRING       reduce using rule 2 (Comandos -> .)
    EMIT            reduce using rule 2 (Comandos -> .)
    COMMENT_START   reduce using rule 2 (Comandos -> .)
    ONELINE         reduce using rule 2 (Comandos -> .)
    ID              reduce using rule 2 (Comandos -> .)
    VARIABLE        reduce using rule 2 (Comandos -> .)
    FUNC_START      reduce using rule 2 (Comandos -> .)
    NUMBER          reduce using rule 2 (Comandos -> .)
    $end            reduce using rule 2 (Comandos -> .)

    Comandos                       shift and go to state 1

state 1

    (0) S' -> Comandos .
    (1) Comandos -> Comandos . Comando
    (3) Comando -> . Expressao
    (4) Comando -> . Imprime
    (5) Comando -> . Comment
    (6) Comando -> . Store
    (7) Comando -> . Variavel
    (8) Comando -> . Conditional
    (9) Comando -> . Loop
    (10) Comando -> . Func
    (11) Expressao -> . Expressao +
    (12) Expressao -> . Expressao -
    (13) Expressao -> . Expressao *
    (14) Expressao -> . Expressao /
    (15) Expressao -> . Expressao %
    (16) Expressao -> . Expressao >
    (17) Expressao -> . Expressao SUPEQ
    (18) Expressao -> . Expressao <
    (19) Expressao -> . Expressao INFEQ
    (20) Expressao -> . Expressao =
    (21) Expressao -> . Termo
    (24) Imprime -> . DOT
    (25) Imprime -> . DOTSTRING
    (26) Imprime -> . EMIT
    (27) Comment -> . COMMENT_START COMMENT_END
    (28) Comment -> . ONELINE
    (29) Store -> . ID !
    (31) Variavel -> . VARIABLE ID
    (32) Conditional -> . Expressao IF Comandos THEN
    (33) Conditional -> . Expressao IF Comandos ELSE Comandos THEN
    (34) Loop -> . Expressao DO Comandos LOOP
    (35) Loop -> . Expressao DO Comandos Expressao MLOOP
    (36) Func -> . FUNC_START ID Comandos FUNC_END
    (22) Termo -> . NUMBER
    (23) Termo -> . Unstore
    (30) Unstore -> . ID @

    DOT             shift and go to state 12
    DOTSTRING       shift and go to state 13
    EMIT            shift and go to state 14
    COMMENT_START   shift and go to state 15
    ONELINE         shift and go to state 16
    ID              shift and go to state 17
    VARIABLE        shift and go to state 18
    FUNC_START      shift and go to state 19
    NUMBER          shift and go to state 20

    Comando                        shift and go to state 2
    Expressao                      shift and go to state 3
    Imprime                        shift and go to state 4
    Comment                        shift and go to state 5
    Store                          shift and go to state 6
    Variavel                       shift and go to state 7
    Conditional                    shift and go to state 8
    Loop                           shift and go to state 9
    Func                           shift and go to state 10
    Termo                          shift and go to state 11
    Unstore                        shift and go to state 21

state 2

    (1) Comandos -> Comandos Comando .

    DOT             reduce using rule 1 (Comandos -> Comandos Comando .)
    DOTSTRING       reduce using rule 1 (Comandos -> Comandos Comando .)
    EMIT            reduce using rule 1 (Comandos -> Comandos Comando .)
    COMMENT_START   reduce using rule 1 (Comandos -> Comandos Comando .)
    ONELINE         reduce using rule 1 (Comandos -> Comandos Comando .)
    ID              reduce using rule 1 (Comandos -> Comandos Comando .)
    VARIABLE        reduce using rule 1 (Comandos -> Comandos Comando .)
    FUNC_START      reduce using rule 1 (Comandos -> Comandos Comando .)
    NUMBER          reduce using rule 1 (Comandos -> Comandos Comando .)
    $end            reduce using rule 1 (Comandos -> Comandos Comando .)
    THEN            reduce using rule 1 (Comandos -> Comandos Comando .)
    ELSE            reduce using rule 1 (Comandos -> Comandos Comando .)
    LOOP            reduce using rule 1 (Comandos -> Comandos Comando .)
    FUNC_END        reduce using rule 1 (Comandos -> Comandos Comando .)


state 3

    (3) Comando -> Expressao .
    (11) Expressao -> Expressao . +
    (12) Expressao -> Expressao . -
    (13) Expressao -> Expressao . *
    (14) Expressao -> Expressao . /
    (15) Expressao -> Expressao . %
    (16) Expressao -> Expressao . >
    (17) Expressao -> Expressao . SUPEQ
    (18) Expressao -> Expressao . <
    (19) Expressao -> Expressao . INFEQ
    (20) Expressao -> Expressao . =
    (32) Conditional -> Expressao . IF Comandos THEN
    (33) Conditional -> Expressao . IF Comandos ELSE Comandos THEN
    (34) Loop -> Expressao . DO Comandos LOOP
    (35) Loop -> Expressao . DO Comandos Expressao MLOOP

    DOT             reduce using rule 3 (Comando -> Expressao .)
    DOTSTRING       reduce using rule 3 (Comando -> Expressao .)
    EMIT            reduce using rule 3 (Comando -> Expressao .)
    COMMENT_START   reduce using rule 3 (Comando -> Expressao .)
    ONELINE         reduce using rule 3 (Comando -> Expressao .)
    ID              reduce using rule 3 (Comando -> Expressao .)
    VARIABLE        reduce using rule 3 (Comando -> Expressao .)
    FUNC_START      reduce using rule 3 (Comando -> Expressao .)
    NUMBER          reduce using rule 3 (Comando -> Expressao .)
    $end            reduce using rule 3 (Comando -> Expressao .)
    THEN            reduce using rule 3 (Comando -> Expressao .)
    ELSE            reduce using rule 3 (Comando -> Expressao .)
    FUNC_END        reduce using rule 3 (Comando -> Expressao .)
    +               shift and go to state 22
    -               shift and go to state 23
    *               shift and go to state 24
    /               shift and go to state 25
    %               shift and go to state 26
    >               shift and go to state 27
    SUPEQ           shift and go to state 28
    <               shift and go to state 29
    INFEQ           shift and go to state 30
    =               shift and go to state 31
    IF              shift and go to state 32
    DO              shift and go to state 33


state 4

    (4) Comando -> Imprime .

    DOT             reduce using rule 4 (Comando -> Imprime .)
    DOTSTRING       reduce using rule 4 (Comando -> Imprime .)
    EMIT            reduce using rule 4 (Comando -> Imprime .)
    COMMENT_START   reduce using rule 4 (Comando -> Imprime .)
    ONELINE         reduce using rule 4 (Comando -> Imprime .)
    ID              reduce using rule 4 (Comando -> Imprime .)
    VARIABLE        reduce using rule 4 (Comando -> Imprime .)
    FUNC_START      reduce using rule 4 (Comando -> Imprime .)
    NUMBER          reduce using rule 4 (Comando -> Imprime .)
    $end            reduce using rule 4 (Comando -> Imprime .)
    THEN            reduce using rule 4 (Comando -> Imprime .)
    ELSE            reduce using rule 4 (Comando -> Imprime .)
    LOOP            reduce using rule 4 (Comando -> Imprime .)
    FUNC_END        reduce using rule 4 (Comando -> Imprime .)


state 5

    (5) Comando -> Comment .

    DOT             reduce using rule 5 (Comando -> Comment .)
    DOTSTRING       reduce using rule 5 (Comando -> Comment .)
    EMIT            reduce using rule 5 (Comando -> Comment .)
    COMMENT_START   reduce using rule 5 (Comando -> Comment .)
    ONELINE         reduce using rule 5 (Comando -> Comment .)
    ID              reduce using rule 5 (Comando -> Comment .)
    VARIABLE        reduce using rule 5 (Comando -> Comment .)
    FUNC_START      reduce using rule 5 (Comando -> Comment .)
    NUMBER          reduce using rule 5 (Comando -> Comment .)
    $end            reduce using rule 5 (Comando -> Comment .)
    THEN            reduce using rule 5 (Comando -> Comment .)
    ELSE            reduce using rule 5 (Comando -> Comment .)
    LOOP            reduce using rule 5 (Comando -> Comment .)
    FUNC_END        reduce using rule 5 (Comando -> Comment .)


state 6

    (6) Comando -> Store .

    DOT             reduce using rule 6 (Comando -> Store .)
    DOTSTRING       reduce using rule 6 (Comando -> Store .)
    EMIT            reduce using rule 6 (Comando -> Store .)
    COMMENT_START   reduce using rule 6 (Comando -> Store .)
    ONELINE         reduce using rule 6 (Comando -> Store .)
    ID              reduce using rule 6 (Comando -> Store .)
    VARIABLE        reduce using rule 6 (Comando -> Store .)
    FUNC_START      reduce using rule 6 (Comando -> Store .)
    NUMBER          reduce using rule 6 (Comando -> Store .)
    $end            reduce using rule 6 (Comando -> Store .)
    THEN            reduce using rule 6 (Comando -> Store .)
    ELSE            reduce using rule 6 (Comando -> Store .)
    LOOP            reduce using rule 6 (Comando -> Store .)
    FUNC_END        reduce using rule 6 (Comando -> Store .)


state 7

    (7) Comando -> Variavel .

    DOT             reduce using rule 7 (Comando -> Variavel .)
    DOTSTRING       reduce using rule 7 (Comando -> Variavel .)
    EMIT            reduce using rule 7 (Comando -> Variavel .)
    COMMENT_START   reduce using rule 7 (Comando -> Variavel .)
    ONELINE         reduce using rule 7 (Comando -> Variavel .)
    ID              reduce using rule 7 (Comando -> Variavel .)
    VARIABLE        reduce using rule 7 (Comando -> Variavel .)
    FUNC_START      reduce using rule 7 (Comando -> Variavel .)
    NUMBER          reduce using rule 7 (Comando -> Variavel .)
    $end            reduce using rule 7 (Comando -> Variavel .)
    THEN            reduce using rule 7 (Comando -> Variavel .)
    ELSE            reduce using rule 7 (Comando -> Variavel .)
    LOOP            reduce using rule 7 (Comando -> Variavel .)
    FUNC_END        reduce using rule 7 (Comando -> Variavel .)


state 8

    (8) Comando -> Conditional .

    DOT             reduce using rule 8 (Comando -> Conditional .)
    DOTSTRING       reduce using rule 8 (Comando -> Conditional .)
    EMIT            reduce using rule 8 (Comando -> Conditional .)
    COMMENT_START   reduce using rule 8 (Comando -> Conditional .)
    ONELINE         reduce using rule 8 (Comando -> Conditional .)
    ID              reduce using rule 8 (Comando -> Conditional .)
    VARIABLE        reduce using rule 8 (Comando -> Conditional .)
    FUNC_START      reduce using rule 8 (Comando -> Conditional .)
    NUMBER          reduce using rule 8 (Comando -> Conditional .)
    $end            reduce using rule 8 (Comando -> Conditional .)
    THEN            reduce using rule 8 (Comando -> Conditional .)
    ELSE            reduce using rule 8 (Comando -> Conditional .)
    LOOP            reduce using rule 8 (Comando -> Conditional .)
    FUNC_END        reduce using rule 8 (Comando -> Conditional .)


state 9

    (9) Comando -> Loop .

    DOT             reduce using rule 9 (Comando -> Loop .)
    DOTSTRING       reduce using rule 9 (Comando -> Loop .)
    EMIT            reduce using rule 9 (Comando -> Loop .)
    COMMENT_START   reduce using rule 9 (Comando -> Loop .)
    ONELINE         reduce using rule 9 (Comando -> Loop .)
    ID              reduce using rule 9 (Comando -> Loop .)
    VARIABLE        reduce using rule 9 (Comando -> Loop .)
    FUNC_START      reduce using rule 9 (Comando -> Loop .)
    NUMBER          reduce using rule 9 (Comando -> Loop .)
    $end            reduce using rule 9 (Comando -> Loop .)
    THEN            reduce using rule 9 (Comando -> Loop .)
    ELSE            reduce using rule 9 (Comando -> Loop .)
    LOOP            reduce using rule 9 (Comando -> Loop .)
    FUNC_END        reduce using rule 9 (Comando -> Loop .)


state 10

    (10) Comando -> Func .

    DOT             reduce using rule 10 (Comando -> Func .)
    DOTSTRING       reduce using rule 10 (Comando -> Func .)
    EMIT            reduce using rule 10 (Comando -> Func .)
    COMMENT_START   reduce using rule 10 (Comando -> Func .)
    ONELINE         reduce using rule 10 (Comando -> Func .)
    ID              reduce using rule 10 (Comando -> Func .)
    VARIABLE        reduce using rule 10 (Comando -> Func .)
    FUNC_START      reduce using rule 10 (Comando -> Func .)
    NUMBER          reduce using rule 10 (Comando -> Func .)
    $end            reduce using rule 10 (Comando -> Func .)
    THEN            reduce using rule 10 (Comando -> Func .)
    ELSE            reduce using rule 10 (Comando -> Func .)
    LOOP            reduce using rule 10 (Comando -> Func .)
    FUNC_END        reduce using rule 10 (Comando -> Func .)


state 11

    (21) Expressao -> Termo .

    +               reduce using rule 21 (Expressao -> Termo .)
    -               reduce using rule 21 (Expressao -> Termo .)
    *               reduce using rule 21 (Expressao -> Termo .)
    /               reduce using rule 21 (Expressao -> Termo .)
    %               reduce using rule 21 (Expressao -> Termo .)
    >               reduce using rule 21 (Expressao -> Termo .)
    SUPEQ           reduce using rule 21 (Expressao -> Termo .)
    <               reduce using rule 21 (Expressao -> Termo .)
    INFEQ           reduce using rule 21 (Expressao -> Termo .)
    =               reduce using rule 21 (Expressao -> Termo .)
    IF              reduce using rule 21 (Expressao -> Termo .)
    DO              reduce using rule 21 (Expressao -> Termo .)
    DOT             reduce using rule 21 (Expressao -> Termo .)
    DOTSTRING       reduce using rule 21 (Expressao -> Termo .)
    EMIT            reduce using rule 21 (Expressao -> Termo .)
    COMMENT_START   reduce using rule 21 (Expressao -> Termo .)
    ONELINE         reduce using rule 21 (Expressao -> Termo .)
    ID              reduce using rule 21 (Expressao -> Termo .)
    VARIABLE        reduce using rule 21 (Expressao -> Termo .)
    FUNC_START      reduce using rule 21 (Expressao -> Termo .)
    NUMBER          reduce using rule 21 (Expressao -> Termo .)
    $end            reduce using rule 21 (Expressao -> Termo .)
    THEN            reduce using rule 21 (Expressao -> Termo .)
    ELSE            reduce using rule 21 (Expressao -> Termo .)
    MLOOP           reduce using rule 21 (Expressao -> Termo .)
    LOOP            reduce using rule 21 (Expressao -> Termo .)
    FUNC_END        reduce using rule 21 (Expressao -> Termo .)


state 12

    (24) Imprime -> DOT .

    DOT             reduce using rule 24 (Imprime -> DOT .)
    DOTSTRING       reduce using rule 24 (Imprime -> DOT .)
    EMIT            reduce using rule 24 (Imprime -> DOT .)
    COMMENT_START   reduce using rule 24 (Imprime -> DOT .)
    ONELINE         reduce using rule 24 (Imprime -> DOT .)
    ID              reduce using rule 24 (Imprime -> DOT .)
    VARIABLE        reduce using rule 24 (Imprime -> DOT .)
    FUNC_START      reduce using rule 24 (Imprime -> DOT .)
    NUMBER          reduce using rule 24 (Imprime -> DOT .)
    $end            reduce using rule 24 (Imprime -> DOT .)
    THEN            reduce using rule 24 (Imprime -> DOT .)
    ELSE            reduce using rule 24 (Imprime -> DOT .)
    LOOP            reduce using rule 24 (Imprime -> DOT .)
    FUNC_END        reduce using rule 24 (Imprime -> DOT .)


state 13

    (25) Imprime -> DOTSTRING .

    DOT             reduce using rule 25 (Imprime -> DOTSTRING .)
    DOTSTRING       reduce using rule 25 (Imprime -> DOTSTRING .)
    EMIT            reduce using rule 25 (Imprime -> DOTSTRING .)
    COMMENT_START   reduce using rule 25 (Imprime -> DOTSTRING .)
    ONELINE         reduce using rule 25 (Imprime -> DOTSTRING .)
    ID              reduce using rule 25 (Imprime -> DOTSTRING .)
    VARIABLE        reduce using rule 25 (Imprime -> DOTSTRING .)
    FUNC_START      reduce using rule 25 (Imprime -> DOTSTRING .)
    NUMBER          reduce using rule 25 (Imprime -> DOTSTRING .)
    $end            reduce using rule 25 (Imprime -> DOTSTRING .)
    THEN            reduce using rule 25 (Imprime -> DOTSTRING .)
    ELSE            reduce using rule 25 (Imprime -> DOTSTRING .)
    LOOP            reduce using rule 25 (Imprime -> DOTSTRING .)
    FUNC_END        reduce using rule 25 (Imprime -> DOTSTRING .)


state 14

    (26) Imprime -> EMIT .

    DOT             reduce using rule 26 (Imprime -> EMIT .)
    DOTSTRING       reduce using rule 26 (Imprime -> EMIT .)
    EMIT            reduce using rule 26 (Imprime -> EMIT .)
    COMMENT_START   reduce using rule 26 (Imprime -> EMIT .)
    ONELINE         reduce using rule 26 (Imprime -> EMIT .)
    ID              reduce using rule 26 (Imprime -> EMIT .)
    VARIABLE        reduce using rule 26 (Imprime -> EMIT .)
    FUNC_START      reduce using rule 26 (Imprime -> EMIT .)
    NUMBER          reduce using rule 26 (Imprime -> EMIT .)
    $end            reduce using rule 26 (Imprime -> EMIT .)
    THEN            reduce using rule 26 (Imprime -> EMIT .)
    ELSE            reduce using rule 26 (Imprime -> EMIT .)
    LOOP            reduce using rule 26 (Imprime -> EMIT .)
    FUNC_END        reduce using rule 26 (Imprime -> EMIT .)


state 15

    (27) Comment -> COMMENT_START . COMMENT_END

    COMMENT_END     shift and go to state 34


state 16

    (28) Comment -> ONELINE .

    DOT             reduce using rule 28 (Comment -> ONELINE .)
    DOTSTRING       reduce using rule 28 (Comment -> ONELINE .)
    EMIT            reduce using rule 28 (Comment -> ONELINE .)
    COMMENT_START   reduce using rule 28 (Comment -> ONELINE .)
    ONELINE         reduce using rule 28 (Comment -> ONELINE .)
    ID              reduce using rule 28 (Comment -> ONELINE .)
    VARIABLE        reduce using rule 28 (Comment -> ONELINE .)
    FUNC_START      reduce using rule 28 (Comment -> ONELINE .)
    NUMBER          reduce using rule 28 (Comment -> ONELINE .)
    $end            reduce using rule 28 (Comment -> ONELINE .)
    THEN            reduce using rule 28 (Comment -> ONELINE .)
    ELSE            reduce using rule 28 (Comment -> ONELINE .)
    LOOP            reduce using rule 28 (Comment -> ONELINE .)
    FUNC_END        reduce using rule 28 (Comment -> ONELINE .)


state 17

    (29) Store -> ID . !
    (30) Unstore -> ID . @

    !               shift and go to state 35
    @               shift and go to state 36


state 18

    (31) Variavel -> VARIABLE . ID

    ID              shift and go to state 37


state 19

    (36) Func -> FUNC_START . ID Comandos FUNC_END

    ID              shift and go to state 38


state 20

    (22) Termo -> NUMBER .

    +               reduce using rule 22 (Termo -> NUMBER .)
    -               reduce using rule 22 (Termo -> NUMBER .)
    *               reduce using rule 22 (Termo -> NUMBER .)
    /               reduce using rule 22 (Termo -> NUMBER .)
    %               reduce using rule 22 (Termo -> NUMBER .)
    >               reduce using rule 22 (Termo -> NUMBER .)
    SUPEQ           reduce using rule 22 (Termo -> NUMBER .)
    <               reduce using rule 22 (Termo -> NUMBER .)
    INFEQ           reduce using rule 22 (Termo -> NUMBER .)
    =               reduce using rule 22 (Termo -> NUMBER .)
    IF              reduce using rule 22 (Termo -> NUMBER .)
    DO              reduce using rule 22 (Termo -> NUMBER .)
    DOT             reduce using rule 22 (Termo -> NUMBER .)
    DOTSTRING       reduce using rule 22 (Termo -> NUMBER .)
    EMIT            reduce using rule 22 (Termo -> NUMBER .)
    COMMENT_START   reduce using rule 22 (Termo -> NUMBER .)
    ONELINE         reduce using rule 22 (Termo -> NUMBER .)
    ID              reduce using rule 22 (Termo -> NUMBER .)
    VARIABLE        reduce using rule 22 (Termo -> NUMBER .)
    FUNC_START      reduce using rule 22 (Termo -> NUMBER .)
    NUMBER          reduce using rule 22 (Termo -> NUMBER .)
    $end            reduce using rule 22 (Termo -> NUMBER .)
    THEN            reduce using rule 22 (Termo -> NUMBER .)
    ELSE            reduce using rule 22 (Termo -> NUMBER .)
    MLOOP           reduce using rule 22 (Termo -> NUMBER .)
    LOOP            reduce using rule 22 (Termo -> NUMBER .)
    FUNC_END        reduce using rule 22 (Termo -> NUMBER .)


state 21

    (23) Termo -> Unstore .

    +               reduce using rule 23 (Termo -> Unstore .)
    -               reduce using rule 23 (Termo -> Unstore .)
    *               reduce using rule 23 (Termo -> Unstore .)
    /               reduce using rule 23 (Termo -> Unstore .)
    %               reduce using rule 23 (Termo -> Unstore .)
    >               reduce using rule 23 (Termo -> Unstore .)
    SUPEQ           reduce using rule 23 (Termo -> Unstore .)
    <               reduce using rule 23 (Termo -> Unstore .)
    INFEQ           reduce using rule 23 (Termo -> Unstore .)
    =               reduce using rule 23 (Termo -> Unstore .)
    IF              reduce using rule 23 (Termo -> Unstore .)
    DO              reduce using rule 23 (Termo -> Unstore .)
    DOT             reduce using rule 23 (Termo -> Unstore .)
    DOTSTRING       reduce using rule 23 (Termo -> Unstore .)
    EMIT            reduce using rule 23 (Termo -> Unstore .)
    COMMENT_START   reduce using rule 23 (Termo -> Unstore .)
    ONELINE         reduce using rule 23 (Termo -> Unstore .)
    ID              reduce using rule 23 (Termo -> Unstore .)
    VARIABLE        reduce using rule 23 (Termo -> Unstore .)
    FUNC_START      reduce using rule 23 (Termo -> Unstore .)
    NUMBER          reduce using rule 23 (Termo -> Unstore .)
    $end            reduce using rule 23 (Termo -> Unstore .)
    THEN            reduce using rule 23 (Termo -> Unstore .)
    ELSE            reduce using rule 23 (Termo -> Unstore .)
    MLOOP           reduce using rule 23 (Termo -> Unstore .)
    LOOP            reduce using rule 23 (Termo -> Unstore .)
    FUNC_END        reduce using rule 23 (Termo -> Unstore .)


state 22

    (11) Expressao -> Expressao + .

    +               reduce using rule 11 (Expressao -> Expressao + .)
    -               reduce using rule 11 (Expressao -> Expressao + .)
    *               reduce using rule 11 (Expressao -> Expressao + .)
    /               reduce using rule 11 (Expressao -> Expressao + .)
    %               reduce using rule 11 (Expressao -> Expressao + .)
    >               reduce using rule 11 (Expressao -> Expressao + .)
    SUPEQ           reduce using rule 11 (Expressao -> Expressao + .)
    <               reduce using rule 11 (Expressao -> Expressao + .)
    INFEQ           reduce using rule 11 (Expressao -> Expressao + .)
    =               reduce using rule 11 (Expressao -> Expressao + .)
    IF              reduce using rule 11 (Expressao -> Expressao + .)
    DO              reduce using rule 11 (Expressao -> Expressao + .)
    DOT             reduce using rule 11 (Expressao -> Expressao + .)
    DOTSTRING       reduce using rule 11 (Expressao -> Expressao + .)
    EMIT            reduce using rule 11 (Expressao -> Expressao + .)
    COMMENT_START   reduce using rule 11 (Expressao -> Expressao + .)
    ONELINE         reduce using rule 11 (Expressao -> Expressao + .)
    ID              reduce using rule 11 (Expressao -> Expressao + .)
    VARIABLE        reduce using rule 11 (Expressao -> Expressao + .)
    FUNC_START      reduce using rule 11 (Expressao -> Expressao + .)
    NUMBER          reduce using rule 11 (Expressao -> Expressao + .)
    $end            reduce using rule 11 (Expressao -> Expressao + .)
    THEN            reduce using rule 11 (Expressao -> Expressao + .)
    ELSE            reduce using rule 11 (Expressao -> Expressao + .)
    MLOOP           reduce using rule 11 (Expressao -> Expressao + .)
    LOOP            reduce using rule 11 (Expressao -> Expressao + .)
    FUNC_END        reduce using rule 11 (Expressao -> Expressao + .)


state 23

    (12) Expressao -> Expressao - .

    +               reduce using rule 12 (Expressao -> Expressao - .)
    -               reduce using rule 12 (Expressao -> Expressao - .)
    *               reduce using rule 12 (Expressao -> Expressao - .)
    /               reduce using rule 12 (Expressao -> Expressao - .)
    %               reduce using rule 12 (Expressao -> Expressao - .)
    >               reduce using rule 12 (Expressao -> Expressao - .)
    SUPEQ           reduce using rule 12 (Expressao -> Expressao - .)
    <               reduce using rule 12 (Expressao -> Expressao - .)
    INFEQ           reduce using rule 12 (Expressao -> Expressao - .)
    =               reduce using rule 12 (Expressao -> Expressao - .)
    IF              reduce using rule 12 (Expressao -> Expressao - .)
    DO              reduce using rule 12 (Expressao -> Expressao - .)
    DOT             reduce using rule 12 (Expressao -> Expressao - .)
    DOTSTRING       reduce using rule 12 (Expressao -> Expressao - .)
    EMIT            reduce using rule 12 (Expressao -> Expressao - .)
    COMMENT_START   reduce using rule 12 (Expressao -> Expressao - .)
    ONELINE         reduce using rule 12 (Expressao -> Expressao - .)
    ID              reduce using rule 12 (Expressao -> Expressao - .)
    VARIABLE        reduce using rule 12 (Expressao -> Expressao - .)
    FUNC_START      reduce using rule 12 (Expressao -> Expressao - .)
    NUMBER          reduce using rule 12 (Expressao -> Expressao - .)
    $end            reduce using rule 12 (Expressao -> Expressao - .)
    THEN            reduce using rule 12 (Expressao -> Expressao - .)
    ELSE            reduce using rule 12 (Expressao -> Expressao - .)
    MLOOP           reduce using rule 12 (Expressao -> Expressao - .)
    LOOP            reduce using rule 12 (Expressao -> Expressao - .)
    FUNC_END        reduce using rule 12 (Expressao -> Expressao - .)


state 24

    (13) Expressao -> Expressao * .

    +               reduce using rule 13 (Expressao -> Expressao * .)
    -               reduce using rule 13 (Expressao -> Expressao * .)
    *               reduce using rule 13 (Expressao -> Expressao * .)
    /               reduce using rule 13 (Expressao -> Expressao * .)
    %               reduce using rule 13 (Expressao -> Expressao * .)
    >               reduce using rule 13 (Expressao -> Expressao * .)
    SUPEQ           reduce using rule 13 (Expressao -> Expressao * .)
    <               reduce using rule 13 (Expressao -> Expressao * .)
    INFEQ           reduce using rule 13 (Expressao -> Expressao * .)
    =               reduce using rule 13 (Expressao -> Expressao * .)
    IF              reduce using rule 13 (Expressao -> Expressao * .)
    DO              reduce using rule 13 (Expressao -> Expressao * .)
    DOT             reduce using rule 13 (Expressao -> Expressao * .)
    DOTSTRING       reduce using rule 13 (Expressao -> Expressao * .)
    EMIT            reduce using rule 13 (Expressao -> Expressao * .)
    COMMENT_START   reduce using rule 13 (Expressao -> Expressao * .)
    ONELINE         reduce using rule 13 (Expressao -> Expressao * .)
    ID              reduce using rule 13 (Expressao -> Expressao * .)
    VARIABLE        reduce using rule 13 (Expressao -> Expressao * .)
    FUNC_START      reduce using rule 13 (Expressao -> Expressao * .)
    NUMBER          reduce using rule 13 (Expressao -> Expressao * .)
    $end            reduce using rule 13 (Expressao -> Expressao * .)
    THEN            reduce using rule 13 (Expressao -> Expressao * .)
    ELSE            reduce using rule 13 (Expressao -> Expressao * .)
    MLOOP           reduce using rule 13 (Expressao -> Expressao * .)
    LOOP            reduce using rule 13 (Expressao -> Expressao * .)
    FUNC_END        reduce using rule 13 (Expressao -> Expressao * .)


state 25

    (14) Expressao -> Expressao / .

    +               reduce using rule 14 (Expressao -> Expressao / .)
    -               reduce using rule 14 (Expressao -> Expressao / .)
    *               reduce using rule 14 (Expressao -> Expressao / .)
    /               reduce using rule 14 (Expressao -> Expressao / .)
    %               reduce using rule 14 (Expressao -> Expressao / .)
    >               reduce using rule 14 (Expressao -> Expressao / .)
    SUPEQ           reduce using rule 14 (Expressao -> Expressao / .)
    <               reduce using rule 14 (Expressao -> Expressao / .)
    INFEQ           reduce using rule 14 (Expressao -> Expressao / .)
    =               reduce using rule 14 (Expressao -> Expressao / .)
    IF              reduce using rule 14 (Expressao -> Expressao / .)
    DO              reduce using rule 14 (Expressao -> Expressao / .)
    DOT             reduce using rule 14 (Expressao -> Expressao / .)
    DOTSTRING       reduce using rule 14 (Expressao -> Expressao / .)
    EMIT            reduce using rule 14 (Expressao -> Expressao / .)
    COMMENT_START   reduce using rule 14 (Expressao -> Expressao / .)
    ONELINE         reduce using rule 14 (Expressao -> Expressao / .)
    ID              reduce using rule 14 (Expressao -> Expressao / .)
    VARIABLE        reduce using rule 14 (Expressao -> Expressao / .)
    FUNC_START      reduce using rule 14 (Expressao -> Expressao / .)
    NUMBER          reduce using rule 14 (Expressao -> Expressao / .)
    $end            reduce using rule 14 (Expressao -> Expressao / .)
    THEN            reduce using rule 14 (Expressao -> Expressao / .)
    ELSE            reduce using rule 14 (Expressao -> Expressao / .)
    MLOOP           reduce using rule 14 (Expressao -> Expressao / .)
    LOOP            reduce using rule 14 (Expressao -> Expressao / .)
    FUNC_END        reduce using rule 14 (Expressao -> Expressao / .)


state 26

    (15) Expressao -> Expressao % .

    +               reduce using rule 15 (Expressao -> Expressao % .)
    -               reduce using rule 15 (Expressao -> Expressao % .)
    *               reduce using rule 15 (Expressao -> Expressao % .)
    /               reduce using rule 15 (Expressao -> Expressao % .)
    %               reduce using rule 15 (Expressao -> Expressao % .)
    >               reduce using rule 15 (Expressao -> Expressao % .)
    SUPEQ           reduce using rule 15 (Expressao -> Expressao % .)
    <               reduce using rule 15 (Expressao -> Expressao % .)
    INFEQ           reduce using rule 15 (Expressao -> Expressao % .)
    =               reduce using rule 15 (Expressao -> Expressao % .)
    IF              reduce using rule 15 (Expressao -> Expressao % .)
    DO              reduce using rule 15 (Expressao -> Expressao % .)
    DOT             reduce using rule 15 (Expressao -> Expressao % .)
    DOTSTRING       reduce using rule 15 (Expressao -> Expressao % .)
    EMIT            reduce using rule 15 (Expressao -> Expressao % .)
    COMMENT_START   reduce using rule 15 (Expressao -> Expressao % .)
    ONELINE         reduce using rule 15 (Expressao -> Expressao % .)
    ID              reduce using rule 15 (Expressao -> Expressao % .)
    VARIABLE        reduce using rule 15 (Expressao -> Expressao % .)
    FUNC_START      reduce using rule 15 (Expressao -> Expressao % .)
    NUMBER          reduce using rule 15 (Expressao -> Expressao % .)
    $end            reduce using rule 15 (Expressao -> Expressao % .)
    THEN            reduce using rule 15 (Expressao -> Expressao % .)
    ELSE            reduce using rule 15 (Expressao -> Expressao % .)
    MLOOP           reduce using rule 15 (Expressao -> Expressao % .)
    LOOP            reduce using rule 15 (Expressao -> Expressao % .)
    FUNC_END        reduce using rule 15 (Expressao -> Expressao % .)


state 27

    (16) Expressao -> Expressao > .

    +               reduce using rule 16 (Expressao -> Expressao > .)
    -               reduce using rule 16 (Expressao -> Expressao > .)
    *               reduce using rule 16 (Expressao -> Expressao > .)
    /               reduce using rule 16 (Expressao -> Expressao > .)
    %               reduce using rule 16 (Expressao -> Expressao > .)
    >               reduce using rule 16 (Expressao -> Expressao > .)
    SUPEQ           reduce using rule 16 (Expressao -> Expressao > .)
    <               reduce using rule 16 (Expressao -> Expressao > .)
    INFEQ           reduce using rule 16 (Expressao -> Expressao > .)
    =               reduce using rule 16 (Expressao -> Expressao > .)
    IF              reduce using rule 16 (Expressao -> Expressao > .)
    DO              reduce using rule 16 (Expressao -> Expressao > .)
    DOT             reduce using rule 16 (Expressao -> Expressao > .)
    DOTSTRING       reduce using rule 16 (Expressao -> Expressao > .)
    EMIT            reduce using rule 16 (Expressao -> Expressao > .)
    COMMENT_START   reduce using rule 16 (Expressao -> Expressao > .)
    ONELINE         reduce using rule 16 (Expressao -> Expressao > .)
    ID              reduce using rule 16 (Expressao -> Expressao > .)
    VARIABLE        reduce using rule 16 (Expressao -> Expressao > .)
    FUNC_START      reduce using rule 16 (Expressao -> Expressao > .)
    NUMBER          reduce using rule 16 (Expressao -> Expressao > .)
    $end            reduce using rule 16 (Expressao -> Expressao > .)
    THEN            reduce using rule 16 (Expressao -> Expressao > .)
    ELSE            reduce using rule 16 (Expressao -> Expressao > .)
    MLOOP           reduce using rule 16 (Expressao -> Expressao > .)
    LOOP            reduce using rule 16 (Expressao -> Expressao > .)
    FUNC_END        reduce using rule 16 (Expressao -> Expressao > .)


state 28

    (17) Expressao -> Expressao SUPEQ .

    +               reduce using rule 17 (Expressao -> Expressao SUPEQ .)
    -               reduce using rule 17 (Expressao -> Expressao SUPEQ .)
    *               reduce using rule 17 (Expressao -> Expressao SUPEQ .)
    /               reduce using rule 17 (Expressao -> Expressao SUPEQ .)
    %               reduce using rule 17 (Expressao -> Expressao SUPEQ .)
    >               reduce using rule 17 (Expressao -> Expressao SUPEQ .)
    SUPEQ           reduce using rule 17 (Expressao -> Expressao SUPEQ .)
    <               reduce using rule 17 (Expressao -> Expressao SUPEQ .)
    INFEQ           reduce using rule 17 (Expressao -> Expressao SUPEQ .)
    =               reduce using rule 17 (Expressao -> Expressao SUPEQ .)
    IF              reduce using rule 17 (Expressao -> Expressao SUPEQ .)
    DO              reduce using rule 17 (Expressao -> Expressao SUPEQ .)
    DOT             reduce using rule 17 (Expressao -> Expressao SUPEQ .)
    DOTSTRING       reduce using rule 17 (Expressao -> Expressao SUPEQ .)
    EMIT            reduce using rule 17 (Expressao -> Expressao SUPEQ .)
    COMMENT_START   reduce using rule 17 (Expressao -> Expressao SUPEQ .)
    ONELINE         reduce using rule 17 (Expressao -> Expressao SUPEQ .)
    ID              reduce using rule 17 (Expressao -> Expressao SUPEQ .)
    VARIABLE        reduce using rule 17 (Expressao -> Expressao SUPEQ .)
    FUNC_START      reduce using rule 17 (Expressao -> Expressao SUPEQ .)
    NUMBER          reduce using rule 17 (Expressao -> Expressao SUPEQ .)
    $end            reduce using rule 17 (Expressao -> Expressao SUPEQ .)
    THEN            reduce using rule 17 (Expressao -> Expressao SUPEQ .)
    ELSE            reduce using rule 17 (Expressao -> Expressao SUPEQ .)
    MLOOP           reduce using rule 17 (Expressao -> Expressao SUPEQ .)
    LOOP            reduce using rule 17 (Expressao -> Expressao SUPEQ .)
    FUNC_END        reduce using rule 17 (Expressao -> Expressao SUPEQ .)


state 29

    (18) Expressao -> Expressao < .

    +               reduce using rule 18 (Expressao -> Expressao < .)
    -               reduce using rule 18 (Expressao -> Expressao < .)
    *               reduce using rule 18 (Expressao -> Expressao < .)
    /               reduce using rule 18 (Expressao -> Expressao < .)
    %               reduce using rule 18 (Expressao -> Expressao < .)
    >               reduce using rule 18 (Expressao -> Expressao < .)
    SUPEQ           reduce using rule 18 (Expressao -> Expressao < .)
    <               reduce using rule 18 (Expressao -> Expressao < .)
    INFEQ           reduce using rule 18 (Expressao -> Expressao < .)
    =               reduce using rule 18 (Expressao -> Expressao < .)
    IF              reduce using rule 18 (Expressao -> Expressao < .)
    DO              reduce using rule 18 (Expressao -> Expressao < .)
    DOT             reduce using rule 18 (Expressao -> Expressao < .)
    DOTSTRING       reduce using rule 18 (Expressao -> Expressao < .)
    EMIT            reduce using rule 18 (Expressao -> Expressao < .)
    COMMENT_START   reduce using rule 18 (Expressao -> Expressao < .)
    ONELINE         reduce using rule 18 (Expressao -> Expressao < .)
    ID              reduce using rule 18 (Expressao -> Expressao < .)
    VARIABLE        reduce using rule 18 (Expressao -> Expressao < .)
    FUNC_START      reduce using rule 18 (Expressao -> Expressao < .)
    NUMBER          reduce using rule 18 (Expressao -> Expressao < .)
    $end            reduce using rule 18 (Expressao -> Expressao < .)
    THEN            reduce using rule 18 (Expressao -> Expressao < .)
    ELSE            reduce using rule 18 (Expressao -> Expressao < .)
    MLOOP           reduce using rule 18 (Expressao -> Expressao < .)
    LOOP            reduce using rule 18 (Expressao -> Expressao < .)
    FUNC_END        reduce using rule 18 (Expressao -> Expressao < .)


state 30

    (19) Expressao -> Expressao INFEQ .

    +               reduce using rule 19 (Expressao -> Expressao INFEQ .)
    -               reduce using rule 19 (Expressao -> Expressao INFEQ .)
    *               reduce using rule 19 (Expressao -> Expressao INFEQ .)
    /               reduce using rule 19 (Expressao -> Expressao INFEQ .)
    %               reduce using rule 19 (Expressao -> Expressao INFEQ .)
    >               reduce using rule 19 (Expressao -> Expressao INFEQ .)
    SUPEQ           reduce using rule 19 (Expressao -> Expressao INFEQ .)
    <               reduce using rule 19 (Expressao -> Expressao INFEQ .)
    INFEQ           reduce using rule 19 (Expressao -> Expressao INFEQ .)
    =               reduce using rule 19 (Expressao -> Expressao INFEQ .)
    IF              reduce using rule 19 (Expressao -> Expressao INFEQ .)
    DO              reduce using rule 19 (Expressao -> Expressao INFEQ .)
    DOT             reduce using rule 19 (Expressao -> Expressao INFEQ .)
    DOTSTRING       reduce using rule 19 (Expressao -> Expressao INFEQ .)
    EMIT            reduce using rule 19 (Expressao -> Expressao INFEQ .)
    COMMENT_START   reduce using rule 19 (Expressao -> Expressao INFEQ .)
    ONELINE         reduce using rule 19 (Expressao -> Expressao INFEQ .)
    ID              reduce using rule 19 (Expressao -> Expressao INFEQ .)
    VARIABLE        reduce using rule 19 (Expressao -> Expressao INFEQ .)
    FUNC_START      reduce using rule 19 (Expressao -> Expressao INFEQ .)
    NUMBER          reduce using rule 19 (Expressao -> Expressao INFEQ .)
    $end            reduce using rule 19 (Expressao -> Expressao INFEQ .)
    THEN            reduce using rule 19 (Expressao -> Expressao INFEQ .)
    ELSE            reduce using rule 19 (Expressao -> Expressao INFEQ .)
    MLOOP           reduce using rule 19 (Expressao -> Expressao INFEQ .)
    LOOP            reduce using rule 19 (Expressao -> Expressao INFEQ .)
    FUNC_END        reduce using rule 19 (Expressao -> Expressao INFEQ .)


state 31

    (20) Expressao -> Expressao = .

    +               reduce using rule 20 (Expressao -> Expressao = .)
    -               reduce using rule 20 (Expressao -> Expressao = .)
    *               reduce using rule 20 (Expressao -> Expressao = .)
    /               reduce using rule 20 (Expressao -> Expressao = .)
    %               reduce using rule 20 (Expressao -> Expressao = .)
    >               reduce using rule 20 (Expressao -> Expressao = .)
    SUPEQ           reduce using rule 20 (Expressao -> Expressao = .)
    <               reduce using rule 20 (Expressao -> Expressao = .)
    INFEQ           reduce using rule 20 (Expressao -> Expressao = .)
    =               reduce using rule 20 (Expressao -> Expressao = .)
    IF              reduce using rule 20 (Expressao -> Expressao = .)
    DO              reduce using rule 20 (Expressao -> Expressao = .)
    DOT             reduce using rule 20 (Expressao -> Expressao = .)
    DOTSTRING       reduce using rule 20 (Expressao -> Expressao = .)
    EMIT            reduce using rule 20 (Expressao -> Expressao = .)
    COMMENT_START   reduce using rule 20 (Expressao -> Expressao = .)
    ONELINE         reduce using rule 20 (Expressao -> Expressao = .)
    ID              reduce using rule 20 (Expressao -> Expressao = .)
    VARIABLE        reduce using rule 20 (Expressao -> Expressao = .)
    FUNC_START      reduce using rule 20 (Expressao -> Expressao = .)
    NUMBER          reduce using rule 20 (Expressao -> Expressao = .)
    $end            reduce using rule 20 (Expressao -> Expressao = .)
    THEN            reduce using rule 20 (Expressao -> Expressao = .)
    ELSE            reduce using rule 20 (Expressao -> Expressao = .)
    MLOOP           reduce using rule 20 (Expressao -> Expressao = .)
    LOOP            reduce using rule 20 (Expressao -> Expressao = .)
    FUNC_END        reduce using rule 20 (Expressao -> Expressao = .)


state 32

    (32) Conditional -> Expressao IF . Comandos THEN
    (33) Conditional -> Expressao IF . Comandos ELSE Comandos THEN
    (1) Comandos -> . Comandos Comando
    (2) Comandos -> .

    THEN            reduce using rule 2 (Comandos -> .)
    ELSE            reduce using rule 2 (Comandos -> .)
    DOT             reduce using rule 2 (Comandos -> .)
    DOTSTRING       reduce using rule 2 (Comandos -> .)
    EMIT            reduce using rule 2 (Comandos -> .)
    COMMENT_START   reduce using rule 2 (Comandos -> .)
    ONELINE         reduce using rule 2 (Comandos -> .)
    ID              reduce using rule 2 (Comandos -> .)
    VARIABLE        reduce using rule 2 (Comandos -> .)
    FUNC_START      reduce using rule 2 (Comandos -> .)
    NUMBER          reduce using rule 2 (Comandos -> .)

    Comandos                       shift and go to state 39

state 33

    (34) Loop -> Expressao DO . Comandos LOOP
    (35) Loop -> Expressao DO . Comandos Expressao MLOOP
    (1) Comandos -> . Comandos Comando
    (2) Comandos -> .

    LOOP            reduce using rule 2 (Comandos -> .)
    NUMBER          reduce using rule 2 (Comandos -> .)
    DOT             reduce using rule 2 (Comandos -> .)
    DOTSTRING       reduce using rule 2 (Comandos -> .)
    EMIT            reduce using rule 2 (Comandos -> .)
    COMMENT_START   reduce using rule 2 (Comandos -> .)
    ONELINE         reduce using rule 2 (Comandos -> .)
    ID              reduce using rule 2 (Comandos -> .)
    VARIABLE        reduce using rule 2 (Comandos -> .)
    FUNC_START      reduce using rule 2 (Comandos -> .)

    Comandos                       shift and go to state 40

state 34

    (27) Comment -> COMMENT_START COMMENT_END .

    DOT             reduce using rule 27 (Comment -> COMMENT_START COMMENT_END .)
    DOTSTRING       reduce using rule 27 (Comment -> COMMENT_START COMMENT_END .)
    EMIT            reduce using rule 27 (Comment -> COMMENT_START COMMENT_END .)
    COMMENT_START   reduce using rule 27 (Comment -> COMMENT_START COMMENT_END .)
    ONELINE         reduce using rule 27 (Comment -> COMMENT_START COMMENT_END .)
    ID              reduce using rule 27 (Comment -> COMMENT_START COMMENT_END .)
    VARIABLE        reduce using rule 27 (Comment -> COMMENT_START COMMENT_END .)
    FUNC_START      reduce using rule 27 (Comment -> COMMENT_START COMMENT_END .)
    NUMBER          reduce using rule 27 (Comment -> COMMENT_START COMMENT_END .)
    $end            reduce using rule 27 (Comment -> COMMENT_START COMMENT_END .)
    THEN            reduce using rule 27 (Comment -> COMMENT_START COMMENT_END .)
    ELSE            reduce using rule 27 (Comment -> COMMENT_START COMMENT_END .)
    LOOP            reduce using rule 27 (Comment -> COMMENT_START COMMENT_END .)
    FUNC_END        reduce using rule 27 (Comment -> COMMENT_START COMMENT_END .)


state 35

    (29) Store -> ID ! .

    DOT             reduce using rule 29 (Store -> ID ! .)
    DOTSTRING       reduce using rule 29 (Store -> ID ! .)
    EMIT            reduce using rule 29 (Store -> ID ! .)
    COMMENT_START   reduce using rule 29 (Store -> ID ! .)
    ONELINE         reduce using rule 29 (Store -> ID ! .)
    ID              reduce using rule 29 (Store -> ID ! .)
    VARIABLE        reduce using rule 29 (Store -> ID ! .)
    FUNC_START      reduce using rule 29 (Store -> ID ! .)
    NUMBER          reduce using rule 29 (Store -> ID ! .)
    $end            reduce using rule 29 (Store -> ID ! .)
    THEN            reduce using rule 29 (Store -> ID ! .)
    ELSE            reduce using rule 29 (Store -> ID ! .)
    LOOP            reduce using rule 29 (Store -> ID ! .)
    FUNC_END        reduce using rule 29 (Store -> ID ! .)


state 36

    (30) Unstore -> ID @ .

    +               reduce using rule 30 (Unstore -> ID @ .)
    -               reduce using rule 30 (Unstore -> ID @ .)
    *               reduce using rule 30 (Unstore -> ID @ .)
    /               reduce using rule 30 (Unstore -> ID @ .)
    %               reduce using rule 30 (Unstore -> ID @ .)
    >               reduce using rule 30 (Unstore -> ID @ .)
    SUPEQ           reduce using rule 30 (Unstore -> ID @ .)
    <               reduce using rule 30 (Unstore -> ID @ .)
    INFEQ           reduce using rule 30 (Unstore -> ID @ .)
    =               reduce using rule 30 (Unstore -> ID @ .)
    IF              reduce using rule 30 (Unstore -> ID @ .)
    DO              reduce using rule 30 (Unstore -> ID @ .)
    DOT             reduce using rule 30 (Unstore -> ID @ .)
    DOTSTRING       reduce using rule 30 (Unstore -> ID @ .)
    EMIT            reduce using rule 30 (Unstore -> ID @ .)
    COMMENT_START   reduce using rule 30 (Unstore -> ID @ .)
    ONELINE         reduce using rule 30 (Unstore -> ID @ .)
    ID              reduce using rule 30 (Unstore -> ID @ .)
    VARIABLE        reduce using rule 30 (Unstore -> ID @ .)
    FUNC_START      reduce using rule 30 (Unstore -> ID @ .)
    NUMBER          reduce using rule 30 (Unstore -> ID @ .)
    $end            reduce using rule 30 (Unstore -> ID @ .)
    THEN            reduce using rule 30 (Unstore -> ID @ .)
    ELSE            reduce using rule 30 (Unstore -> ID @ .)
    MLOOP           reduce using rule 30 (Unstore -> ID @ .)
    LOOP            reduce using rule 30 (Unstore -> ID @ .)
    FUNC_END        reduce using rule 30 (Unstore -> ID @ .)


state 37

    (31) Variavel -> VARIABLE ID .

    DOT             reduce using rule 31 (Variavel -> VARIABLE ID .)
    DOTSTRING       reduce using rule 31 (Variavel -> VARIABLE ID .)
    EMIT            reduce using rule 31 (Variavel -> VARIABLE ID .)
    COMMENT_START   reduce using rule 31 (Variavel -> VARIABLE ID .)
    ONELINE         reduce using rule 31 (Variavel -> VARIABLE ID .)
    ID              reduce using rule 31 (Variavel -> VARIABLE ID .)
    VARIABLE        reduce using rule 31 (Variavel -> VARIABLE ID .)
    FUNC_START      reduce using rule 31 (Variavel -> VARIABLE ID .)
    NUMBER          reduce using rule 31 (Variavel -> VARIABLE ID .)
    $end            reduce using rule 31 (Variavel -> VARIABLE ID .)
    THEN            reduce using rule 31 (Variavel -> VARIABLE ID .)
    ELSE            reduce using rule 31 (Variavel -> VARIABLE ID .)
    LOOP            reduce using rule 31 (Variavel -> VARIABLE ID .)
    FUNC_END        reduce using rule 31 (Variavel -> VARIABLE ID .)


state 38

    (36) Func -> FUNC_START ID . Comandos FUNC_END
    (1) Comandos -> . Comandos Comando
    (2) Comandos -> .

    FUNC_END        reduce using rule 2 (Comandos -> .)
    DOT             reduce using rule 2 (Comandos -> .)
    DOTSTRING       reduce using rule 2 (Comandos -> .)
    EMIT            reduce using rule 2 (Comandos -> .)
    COMMENT_START   reduce using rule 2 (Comandos -> .)
    ONELINE         reduce using rule 2 (Comandos -> .)
    ID              reduce using rule 2 (Comandos -> .)
    VARIABLE        reduce using rule 2 (Comandos -> .)
    FUNC_START      reduce using rule 2 (Comandos -> .)
    NUMBER          reduce using rule 2 (Comandos -> .)

    Comandos                       shift and go to state 41

state 39

    (32) Conditional -> Expressao IF Comandos . THEN
    (33) Conditional -> Expressao IF Comandos . ELSE Comandos THEN
    (1) Comandos -> Comandos . Comando
    (3) Comando -> . Expressao
    (4) Comando -> . Imprime
    (5) Comando -> . Comment
    (6) Comando -> . Store
    (7) Comando -> . Variavel
    (8) Comando -> . Conditional
    (9) Comando -> . Loop
    (10) Comando -> . Func
    (11) Expressao -> . Expressao +
    (12) Expressao -> . Expressao -
    (13) Expressao -> . Expressao *
    (14) Expressao -> . Expressao /
    (15) Expressao -> . Expressao %
    (16) Expressao -> . Expressao >
    (17) Expressao -> . Expressao SUPEQ
    (18) Expressao -> . Expressao <
    (19) Expressao -> . Expressao INFEQ
    (20) Expressao -> . Expressao =
    (21) Expressao -> . Termo
    (24) Imprime -> . DOT
    (25) Imprime -> . DOTSTRING
    (26) Imprime -> . EMIT
    (27) Comment -> . COMMENT_START COMMENT_END
    (28) Comment -> . ONELINE
    (29) Store -> . ID !
    (31) Variavel -> . VARIABLE ID
    (32) Conditional -> . Expressao IF Comandos THEN
    (33) Conditional -> . Expressao IF Comandos ELSE Comandos THEN
    (34) Loop -> . Expressao DO Comandos LOOP
    (35) Loop -> . Expressao DO Comandos Expressao MLOOP
    (36) Func -> . FUNC_START ID Comandos FUNC_END
    (22) Termo -> . NUMBER
    (23) Termo -> . Unstore
    (30) Unstore -> . ID @

    THEN            shift and go to state 42
    ELSE            shift and go to state 43
    DOT             shift and go to state 12
    DOTSTRING       shift and go to state 13
    EMIT            shift and go to state 14
    COMMENT_START   shift and go to state 15
    ONELINE         shift and go to state 16
    ID              shift and go to state 17
    VARIABLE        shift and go to state 18
    FUNC_START      shift and go to state 19
    NUMBER          shift and go to state 20

    Expressao                      shift and go to state 3
    Comando                        shift and go to state 2
    Imprime                        shift and go to state 4
    Comment                        shift and go to state 5
    Store                          shift and go to state 6
    Variavel                       shift and go to state 7
    Conditional                    shift and go to state 8
    Loop                           shift and go to state 9
    Func                           shift and go to state 10
    Termo                          shift and go to state 11
    Unstore                        shift and go to state 21

state 40

    (34) Loop -> Expressao DO Comandos . LOOP
    (35) Loop -> Expressao DO Comandos . Expressao MLOOP
    (1) Comandos -> Comandos . Comando
    (11) Expressao -> . Expressao +
    (12) Expressao -> . Expressao -
    (13) Expressao -> . Expressao *
    (14) Expressao -> . Expressao /
    (15) Expressao -> . Expressao %
    (16) Expressao -> . Expressao >
    (17) Expressao -> . Expressao SUPEQ
    (18) Expressao -> . Expressao <
    (19) Expressao -> . Expressao INFEQ
    (20) Expressao -> . Expressao =
    (21) Expressao -> . Termo
    (3) Comando -> . Expressao
    (4) Comando -> . Imprime
    (5) Comando -> . Comment
    (6) Comando -> . Store
    (7) Comando -> . Variavel
    (8) Comando -> . Conditional
    (9) Comando -> . Loop
    (10) Comando -> . Func
    (22) Termo -> . NUMBER
    (23) Termo -> . Unstore
    (24) Imprime -> . DOT
    (25) Imprime -> . DOTSTRING
    (26) Imprime -> . EMIT
    (27) Comment -> . COMMENT_START COMMENT_END
    (28) Comment -> . ONELINE
    (29) Store -> . ID !
    (31) Variavel -> . VARIABLE ID
    (32) Conditional -> . Expressao IF Comandos THEN
    (33) Conditional -> . Expressao IF Comandos ELSE Comandos THEN
    (34) Loop -> . Expressao DO Comandos LOOP
    (35) Loop -> . Expressao DO Comandos Expressao MLOOP
    (36) Func -> . FUNC_START ID Comandos FUNC_END
    (30) Unstore -> . ID @

    LOOP            shift and go to state 45
    NUMBER          shift and go to state 20
    DOT             shift and go to state 12
    DOTSTRING       shift and go to state 13
    EMIT            shift and go to state 14
    COMMENT_START   shift and go to state 15
    ONELINE         shift and go to state 16
    ID              shift and go to state 17
    VARIABLE        shift and go to state 18
    FUNC_START      shift and go to state 19

    Expressao                      shift and go to state 44
    Comando                        shift and go to state 2
    Termo                          shift and go to state 11
    Imprime                        shift and go to state 4
    Comment                        shift and go to state 5
    Store                          shift and go to state 6
    Variavel                       shift and go to state 7
    Conditional                    shift and go to state 8
    Loop                           shift and go to state 9
    Func                           shift and go to state 10
    Unstore                        shift and go to state 21

state 41

    (36) Func -> FUNC_START ID Comandos . FUNC_END
    (1) Comandos -> Comandos . Comando
    (3) Comando -> . Expressao
    (4) Comando -> . Imprime
    (5) Comando -> . Comment
    (6) Comando -> . Store
    (7) Comando -> . Variavel
    (8) Comando -> . Conditional
    (9) Comando -> . Loop
    (10) Comando -> . Func
    (11) Expressao -> . Expressao +
    (12) Expressao -> . Expressao -
    (13) Expressao -> . Expressao *
    (14) Expressao -> . Expressao /
    (15) Expressao -> . Expressao %
    (16) Expressao -> . Expressao >
    (17) Expressao -> . Expressao SUPEQ
    (18) Expressao -> . Expressao <
    (19) Expressao -> . Expressao INFEQ
    (20) Expressao -> . Expressao =
    (21) Expressao -> . Termo
    (24) Imprime -> . DOT
    (25) Imprime -> . DOTSTRING
    (26) Imprime -> . EMIT
    (27) Comment -> . COMMENT_START COMMENT_END
    (28) Comment -> . ONELINE
    (29) Store -> . ID !
    (31) Variavel -> . VARIABLE ID
    (32) Conditional -> . Expressao IF Comandos THEN
    (33) Conditional -> . Expressao IF Comandos ELSE Comandos THEN
    (34) Loop -> . Expressao DO Comandos LOOP
    (35) Loop -> . Expressao DO Comandos Expressao MLOOP
    (36) Func -> . FUNC_START ID Comandos FUNC_END
    (22) Termo -> . NUMBER
    (23) Termo -> . Unstore
    (30) Unstore -> . ID @

    FUNC_END        shift and go to state 46
    DOT             shift and go to state 12
    DOTSTRING       shift and go to state 13
    EMIT            shift and go to state 14
    COMMENT_START   shift and go to state 15
    ONELINE         shift and go to state 16
    ID              shift and go to state 17
    VARIABLE        shift and go to state 18
    FUNC_START      shift and go to state 19
    NUMBER          shift and go to state 20

    Comando                        shift and go to state 2
    Expressao                      shift and go to state 3
    Imprime                        shift and go to state 4
    Comment                        shift and go to state 5
    Store                          shift and go to state 6
    Variavel                       shift and go to state 7
    Conditional                    shift and go to state 8
    Loop                           shift and go to state 9
    Func                           shift and go to state 10
    Termo                          shift and go to state 11
    Unstore                        shift and go to state 21

state 42

    (32) Conditional -> Expressao IF Comandos THEN .

    DOT             reduce using rule 32 (Conditional -> Expressao IF Comandos THEN .)
    DOTSTRING       reduce using rule 32 (Conditional -> Expressao IF Comandos THEN .)
    EMIT            reduce using rule 32 (Conditional -> Expressao IF Comandos THEN .)
    COMMENT_START   reduce using rule 32 (Conditional -> Expressao IF Comandos THEN .)
    ONELINE         reduce using rule 32 (Conditional -> Expressao IF Comandos THEN .)
    ID              reduce using rule 32 (Conditional -> Expressao IF Comandos THEN .)
    VARIABLE        reduce using rule 32 (Conditional -> Expressao IF Comandos THEN .)
    FUNC_START      reduce using rule 32 (Conditional -> Expressao IF Comandos THEN .)
    NUMBER          reduce using rule 32 (Conditional -> Expressao IF Comandos THEN .)
    $end            reduce using rule 32 (Conditional -> Expressao IF Comandos THEN .)
    THEN            reduce using rule 32 (Conditional -> Expressao IF Comandos THEN .)
    ELSE            reduce using rule 32 (Conditional -> Expressao IF Comandos THEN .)
    LOOP            reduce using rule 32 (Conditional -> Expressao IF Comandos THEN .)
    FUNC_END        reduce using rule 32 (Conditional -> Expressao IF Comandos THEN .)


state 43

    (33) Conditional -> Expressao IF Comandos ELSE . Comandos THEN
    (1) Comandos -> . Comandos Comando
    (2) Comandos -> .

    THEN            reduce using rule 2 (Comandos -> .)
    DOT             reduce using rule 2 (Comandos -> .)
    DOTSTRING       reduce using rule 2 (Comandos -> .)
    EMIT            reduce using rule 2 (Comandos -> .)
    COMMENT_START   reduce using rule 2 (Comandos -> .)
    ONELINE         reduce using rule 2 (Comandos -> .)
    ID              reduce using rule 2 (Comandos -> .)
    VARIABLE        reduce using rule 2 (Comandos -> .)
    FUNC_START      reduce using rule 2 (Comandos -> .)
    NUMBER          reduce using rule 2 (Comandos -> .)

    Comandos                       shift and go to state 47

state 44

    (35) Loop -> Expressao DO Comandos Expressao . MLOOP
    (11) Expressao -> Expressao . +
    (12) Expressao -> Expressao . -
    (13) Expressao -> Expressao . *
    (14) Expressao -> Expressao . /
    (15) Expressao -> Expressao . %
    (16) Expressao -> Expressao . >
    (17) Expressao -> Expressao . SUPEQ
    (18) Expressao -> Expressao . <
    (19) Expressao -> Expressao . INFEQ
    (20) Expressao -> Expressao . =
    (3) Comando -> Expressao .
    (32) Conditional -> Expressao . IF Comandos THEN
    (33) Conditional -> Expressao . IF Comandos ELSE Comandos THEN
    (34) Loop -> Expressao . DO Comandos LOOP
    (35) Loop -> Expressao . DO Comandos Expressao MLOOP

    MLOOP           shift and go to state 48
    +               shift and go to state 22
    -               shift and go to state 23
    *               shift and go to state 24
    /               shift and go to state 25
    %               shift and go to state 26
    >               shift and go to state 27
    SUPEQ           shift and go to state 28
    <               shift and go to state 29
    INFEQ           shift and go to state 30
    =               shift and go to state 31
    LOOP            reduce using rule 3 (Comando -> Expressao .)
    NUMBER          reduce using rule 3 (Comando -> Expressao .)
    DOT             reduce using rule 3 (Comando -> Expressao .)
    DOTSTRING       reduce using rule 3 (Comando -> Expressao .)
    EMIT            reduce using rule 3 (Comando -> Expressao .)
    COMMENT_START   reduce using rule 3 (Comando -> Expressao .)
    ONELINE         reduce using rule 3 (Comando -> Expressao .)
    ID              reduce using rule 3 (Comando -> Expressao .)
    VARIABLE        reduce using rule 3 (Comando -> Expressao .)
    FUNC_START      reduce using rule 3 (Comando -> Expressao .)
    IF              shift and go to state 32
    DO              shift and go to state 33


state 45

    (34) Loop -> Expressao DO Comandos LOOP .

    DOT             reduce using rule 34 (Loop -> Expressao DO Comandos LOOP .)
    DOTSTRING       reduce using rule 34 (Loop -> Expressao DO Comandos LOOP .)
    EMIT            reduce using rule 34 (Loop -> Expressao DO Comandos LOOP .)
    COMMENT_START   reduce using rule 34 (Loop -> Expressao DO Comandos LOOP .)
    ONELINE         reduce using rule 34 (Loop -> Expressao DO Comandos LOOP .)
    ID              reduce using rule 34 (Loop -> Expressao DO Comandos LOOP .)
    VARIABLE        reduce using rule 34 (Loop -> Expressao DO Comandos LOOP .)
    FUNC_START      reduce using rule 34 (Loop -> Expressao DO Comandos LOOP .)
    NUMBER          reduce using rule 34 (Loop -> Expressao DO Comandos LOOP .)
    $end            reduce using rule 34 (Loop -> Expressao DO Comandos LOOP .)
    THEN            reduce using rule 34 (Loop -> Expressao DO Comandos LOOP .)
    ELSE            reduce using rule 34 (Loop -> Expressao DO Comandos LOOP .)
    LOOP            reduce using rule 34 (Loop -> Expressao DO Comandos LOOP .)
    FUNC_END        reduce using rule 34 (Loop -> Expressao DO Comandos LOOP .)


state 46

    (36) Func -> FUNC_START ID Comandos FUNC_END .

    DOT             reduce using rule 36 (Func -> FUNC_START ID Comandos FUNC_END .)
    DOTSTRING       reduce using rule 36 (Func -> FUNC_START ID Comandos FUNC_END .)
    EMIT            reduce using rule 36 (Func -> FUNC_START ID Comandos FUNC_END .)
    COMMENT_START   reduce using rule 36 (Func -> FUNC_START ID Comandos FUNC_END .)
    ONELINE         reduce using rule 36 (Func -> FUNC_START ID Comandos FUNC_END .)
    ID              reduce using rule 36 (Func -> FUNC_START ID Comandos FUNC_END .)
    VARIABLE        reduce using rule 36 (Func -> FUNC_START ID Comandos FUNC_END .)
    FUNC_START      reduce using rule 36 (Func -> FUNC_START ID Comandos FUNC_END .)
    NUMBER          reduce using rule 36 (Func -> FUNC_START ID Comandos FUNC_END .)
    $end            reduce using rule 36 (Func -> FUNC_START ID Comandos FUNC_END .)
    THEN            reduce using rule 36 (Func -> FUNC_START ID Comandos FUNC_END .)
    ELSE            reduce using rule 36 (Func -> FUNC_START ID Comandos FUNC_END .)
    LOOP            reduce using rule 36 (Func -> FUNC_START ID Comandos FUNC_END .)
    FUNC_END        reduce using rule 36 (Func -> FUNC_START ID Comandos FUNC_END .)


state 47

    (33) Conditional -> Expressao IF Comandos ELSE Comandos . THEN
    (1) Comandos -> Comandos . Comando
    (3) Comando -> . Expressao
    (4) Comando -> . Imprime
    (5) Comando -> . Comment
    (6) Comando -> . Store
    (7) Comando -> . Variavel
    (8) Comando -> . Conditional
    (9) Comando -> . Loop
    (10) Comando -> . Func
    (11) Expressao -> . Expressao +
    (12) Expressao -> . Expressao -
    (13) Expressao -> . Expressao *
    (14) Expressao -> . Expressao /
    (15) Expressao -> . Expressao %
    (16) Expressao -> . Expressao >
    (17) Expressao -> . Expressao SUPEQ
    (18) Expressao -> . Expressao <
    (19) Expressao -> . Expressao INFEQ
    (20) Expressao -> . Expressao =
    (21) Expressao -> . Termo
    (24) Imprime -> . DOT
    (25) Imprime -> . DOTSTRING
    (26) Imprime -> . EMIT
    (27) Comment -> . COMMENT_START COMMENT_END
    (28) Comment -> . ONELINE
    (29) Store -> . ID !
    (31) Variavel -> . VARIABLE ID
    (32) Conditional -> . Expressao IF Comandos THEN
    (33) Conditional -> . Expressao IF Comandos ELSE Comandos THEN
    (34) Loop -> . Expressao DO Comandos LOOP
    (35) Loop -> . Expressao DO Comandos Expressao MLOOP
    (36) Func -> . FUNC_START ID Comandos FUNC_END
    (22) Termo -> . NUMBER
    (23) Termo -> . Unstore
    (30) Unstore -> . ID @

    THEN            shift and go to state 49
    DOT             shift and go to state 12
    DOTSTRING       shift and go to state 13
    EMIT            shift and go to state 14
    COMMENT_START   shift and go to state 15
    ONELINE         shift and go to state 16
    ID              shift and go to state 17
    VARIABLE        shift and go to state 18
    FUNC_START      shift and go to state 19
    NUMBER          shift and go to state 20

    Expressao                      shift and go to state 3
    Comando                        shift and go to state 2
    Imprime                        shift and go to state 4
    Comment                        shift and go to state 5
    Store                          shift and go to state 6
    Variavel                       shift and go to state 7
    Conditional                    shift and go to state 8
    Loop                           shift and go to state 9
    Func                           shift and go to state 10
    Termo                          shift and go to state 11
    Unstore                        shift and go to state 21

state 48

    (35) Loop -> Expressao DO Comandos Expressao MLOOP .

    DOT             reduce using rule 35 (Loop -> Expressao DO Comandos Expressao MLOOP .)
    DOTSTRING       reduce using rule 35 (Loop -> Expressao DO Comandos Expressao MLOOP .)
    EMIT            reduce using rule 35 (Loop -> Expressao DO Comandos Expressao MLOOP .)
    COMMENT_START   reduce using rule 35 (Loop -> Expressao DO Comandos Expressao MLOOP .)
    ONELINE         reduce using rule 35 (Loop -> Expressao DO Comandos Expressao MLOOP .)
    ID              reduce using rule 35 (Loop -> Expressao DO Comandos Expressao MLOOP .)
    VARIABLE        reduce using rule 35 (Loop -> Expressao DO Comandos Expressao MLOOP .)
    FUNC_START      reduce using rule 35 (Loop -> Expressao DO Comandos Expressao MLOOP .)
    NUMBER          reduce using rule 35 (Loop -> Expressao DO Comandos Expressao MLOOP .)
    $end            reduce using rule 35 (Loop -> Expressao DO Comandos Expressao MLOOP .)
    THEN            reduce using rule 35 (Loop -> Expressao DO Comandos Expressao MLOOP .)
    ELSE            reduce using rule 35 (Loop -> Expressao DO Comandos Expressao MLOOP .)
    LOOP            reduce using rule 35 (Loop -> Expressao DO Comandos Expressao MLOOP .)
    FUNC_END        reduce using rule 35 (Loop -> Expressao DO Comandos Expressao MLOOP .)


state 49

    (33) Conditional -> Expressao IF Comandos ELSE Comandos THEN .

    DOT             reduce using rule 33 (Conditional -> Expressao IF Comandos ELSE Comandos THEN .)
    DOTSTRING       reduce using rule 33 (Conditional -> Expressao IF Comandos ELSE Comandos THEN .)
    EMIT            reduce using rule 33 (Conditional -> Expressao IF Comandos ELSE Comandos THEN .)
    COMMENT_START   reduce using rule 33 (Conditional -> Expressao IF Comandos ELSE Comandos THEN .)
    ONELINE         reduce using rule 33 (Conditional -> Expressao IF Comandos ELSE Comandos THEN .)
    ID              reduce using rule 33 (Conditional -> Expressao IF Comandos ELSE Comandos THEN .)
    VARIABLE        reduce using rule 33 (Conditional -> Expressao IF Comandos ELSE Comandos THEN .)
    FUNC_START      reduce using rule 33 (Conditional -> Expressao IF Comandos ELSE Comandos THEN .)
    NUMBER          reduce using rule 33 (Conditional -> Expressao IF Comandos ELSE Comandos THEN .)
    $end            reduce using rule 33 (Conditional -> Expressao IF Comandos ELSE Comandos THEN .)
    THEN            reduce using rule 33 (Conditional -> Expressao IF Comandos ELSE Comandos THEN .)
    ELSE            reduce using rule 33 (Conditional -> Expressao IF Comandos ELSE Comandos THEN .)
    LOOP            reduce using rule 33 (Conditional -> Expressao IF Comandos ELSE Comandos THEN .)
    FUNC_END        reduce using rule 33 (Conditional -> Expressao IF Comandos ELSE Comandos THEN .)

